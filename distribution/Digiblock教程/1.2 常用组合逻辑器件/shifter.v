/*
 * Generated by Digiblock. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module LogicalLeft #(
parameter Bits = 4,
parameter shiftBits=3
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

assign out = (in << shift);

endmodule
module RotateLeft #(
parameter Bits = 4,
parameter shiftBits=3
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

wire [(shiftBits-2):0] num;
assign num=shift[(shiftBits-2):0];
assign out = (in >> (Bits-num)| (in<<num));

endmodule
module LogicalRight #(
parameter Bits = 4,
parameter shiftBits=3
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

assign out = (in >> shift);

endmodule
module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module shifter (
  input [7:0] D_S,
  input [3:0] shift_LL,
  input [3:0] shift_LR,
  input [3:0] shift_RL,
  input [7:0] D,
  input [3:0] shift,
  output [7:0] Q_LL,
  output [7:0] Q_LR,
  output [7:0] Q_RA,
  output [7:0] Q
);
  wire s0;
  wire [7:0] s1;
  wire s2;
  wire [7:0] s3;
  wire [7:0] s4;
  wire s5;
  wire [7:0] s6;
  wire [7:0] s7;
  wire s8;
  wire [7:0] s9;
  LogicalLeft #(
    .Bits(8),
    .shiftBits(4)
  )
  LogicalLeft_i0 (
    .in( D_S ),
    .shift( shift_LL ),
    .out( Q_LL )
  );
  RotateLeft #(
    .Bits(8),
    .shiftBits(4)
  )
  RotateLeft_i1 (
    .in( D_S ),
    .shift( shift_LR ),
    .out( Q_LR )
  );
  LogicalRight #(
    .Bits(8),
    .shiftBits(4)
  )
  LogicalRight_i2 (
    .in( D_S ),
    .shift( shift_RL ),
    .out( Q_RA )
  );
  assign s0 = shift[3];
  assign s2 = shift[2];
  assign s5 = shift[1];
  assign s8 = shift[0];
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i3 (
    .sel( s0 ),
    .in_0( D ),
    .in_1( 8'b0 ),
    .out( s1 )
  );
  assign s3[3:0] = s1[7:4];
  assign s3[7:4] = 4'b0;
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i4 (
    .sel( s2 ),
    .in_0( s1 ),
    .in_1( s3 ),
    .out( s4 )
  );
  assign s6[5:0] = s4[7:2];
  assign s6[7:6] = 2'b0;
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i5 (
    .sel( s5 ),
    .in_0( s4 ),
    .in_1( s6 ),
    .out( s7 )
  );
  assign s9[6:0] = s7[7:1];
  assign s9[7] = 1'b0;
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i6 (
    .sel( s8 ),
    .in_0( s7 ),
    .in_1( s9 ),
    .out( Q )
  );
endmodule
