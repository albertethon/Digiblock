/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule



module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule


module ShiftLeftL #(
parameter Bits = 4,
parameter shiftBits=2
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

assign out = (in << shift);

endmodule

module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module brachPre (
  input [31:0] instr,
  input [31:0] rs1,
  input [1:0] pcws,
  input [31:0] romD,
  input preRI, // ????????bxx?????
  input clock,
  input pcen,
  input bubble,
  input [31:0] oPc,
  input ret,
  input [31:0] mePc,
  input [1:0] status,
  input inters,
  output [31:0] PC,
  output preJPc, // ??????
  output [2:0] type
);
  wire [7:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire [2:0] type_temp;
  wire [31:0] s4;
  wire s5;
  wire [12:0] s6;
  wire s7;
  wire [20:0] s8;
  wire [31:0] s9;
  wire [31:0] s10;
  wire [31:0] s11;
  wire [31:0] PC_temp;
  wire [31:0] s12;
  wire [31:0] s13;
  wire [31:0] s14;
  wire s15;
  wire [31:0] s16;
  wire s17;
  wire s18;
  wire [31:0] s19;
  wire [31:0] s20;
  wire s21;
  wire s22;
  wire [31:0] s23;
  wire [10:0] s24;
  wire [31:0] s25;
  wire [18:0] s26;
  wire [31:0] s27;
  wire s28;
  wire [19:0] s29;
  wire [1:0] s30;
  wire [31:0] s31;
  wire [31:0] s32;
  wire [31:0] s33;
  wire [31:0] s34;
  wire [31:0] s35;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i0 (
    .sel( preRI ),
    .in_0( romD ),
    .in_1( instr ),
    .out( s4 )
  );
  assign s21 = (~ bubble & pcen);
  assign s30[0] = ret;
  assign s30[1] = inters;
  assign s35[1:0] = status;
  assign s35[31:2] = 30'b0;
  assign s33[28:0] = mePc[28:0];
  assign s33[31:29] = 3'b0;
  assign s0[6:0] = s4[6:0];
  assign s0[7] = 1'b0;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( s33 ),
    .b( 32'b100 ),
    .c_i( 1'b0 ),
    .s( s31 )
  );
  ShiftLeftL #(
    .Bits(32),
    .shiftBits(2)
  )
  ShiftLeftL_i2 (
    .in( s35 ),
    .shift( 2'b10 ),
    .out( s34 )
  );
  assign s5 = s4[31];
  assign s7 = s4[31];
  assign s28 = s4[31];
  // JAL
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i3 (
    .a( s0 ),
    .b( 8'b1101111 ),
    .\= ( s1 )
  );
  // JALR
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i4 (
    .a( s0 ),
    .b( 8'b1100111 ),
    .\= ( s2 )
  );
  // BXX
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i5 (
    .a( s0 ),
    .b( 8'b1100011 ),
    .\= ( s3 )
  );
  assign s6[0] = 1'b0;
  assign s6[4:1] = s4[11:8];
  assign s6[10:5] = s4[30:25];
  assign s6[11] = s4[7];
  assign s6[12] = s5;
  assign s8[0] = 1'b0;
  assign s8[10:1] = s4[30:21];
  assign s8[11] = s4[20];
  assign s8[19:12] = s4[19:12];
  assign s8[20] = s7;
  Mux_2x1_NBits #(
    .Bits(11)
  )
  Mux_2x1_NBits_i6 (
    .sel( s7 ),
    .in_0( 11'b0 ),
    .in_1( 11'b11111111111 ),
    .out( s24 )
  );
  Mux_2x1_NBits #(
    .Bits(19)
  )
  Mux_2x1_NBits_i7 (
    .sel( s5 ),
    .in_0( 19'b0 ),
    .in_1( 19'b1111111111111111111 ),
    .out( s26 )
  );
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i8 (
    .sel( s28 ),
    .in_0( 20'b0 ),
    .in_1( 20'b11111111111111111111 ),
    .out( s29 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i9 (
    .a( 32'b11000000 ),
    .b( s34 ),
    .c_i( 1'b0 ),
    .s( s32 )
  );
  assign type_temp[0] = s1;
  assign type_temp[1] = s2;
  assign type_temp[2] = s3;
  assign s17 = (s1 | (s3 & s4[31]));
  assign s25[20:0] = s8;
  assign s25[31:21] = s24;
  assign s27[12:0] = s6;
  assign s27[31:13] = s26;
  assign s19[11:0] = s4[31:20];
  assign s19[31:12] = s29;
  // ja
  ShiftLeftL #(
    .Bits(32),
    .shiftBits(1)
  )
  ShiftLeftL_i10 (
    .in( s25 ),
    .shift( 1'b1 ),
    .out( s12 )
  );
  // bxx
  ShiftLeftL #(
    .Bits(32),
    .shiftBits(1)
  )
  ShiftLeftL_i11 (
    .in( s27 ),
    .shift( 1'b1 ),
    .out( s23 )
  );
  assign s22 = ~ s17;
  Mux_2x1 Mux_2x1_i12 (
    .sel( preRI ),
    .in_0( s17 ),
    .in_1( s22 ),
    .out( s18 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i13 (
    .sel( s18 ),
    .in_0( 32'b100 ),
    .in_1( s19 ),
    .out( s13 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i14 (
    .sel( s18 ),
    .in_0( 32'b100 ),
    .in_1( s23 ),
    .out( s14 )
  );
  assign s15 = (s2 & s18);
  Mux_2x1 Mux_2x1_i15 (
    .sel( preRI ),
    .in_0( s18 ),
    .in_1( 1'b0 ),
    .out( preJPc )
  );
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i16 (
    .sel( type_temp ),
    .in_0( 32'b100 ),
    .in_1( s12 ),
    .in_2( s13 ),
    .in_3( 32'b0 ),
    .in_4( s14 ),
    .in_5( 32'b0 ),
    .in_6( 32'b0 ),
    .in_7( 32'b0 ),
    .out( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i17 (
    .a( s9 ),
    .b( s10 ),
    .c_i( 1'b0 ),
    .s( s11 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i18 (
    .sel( s15 ),
    .in_0( s16 ),
    .in_1( rs1 ),
    .out( s9 )
  );
  // pc
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i19 (
    .D( s20 ),
    .C( clock ),
    .en( s21 ),
    .Q( PC_temp )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i20 (
    .sel( preRI ),
    .in_0( PC_temp ),
    .in_1( oPc ),
    .out( s16 )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i21 (
    .sel( s30 ),
    .in_0( s11 ),
    .in_1( s31 ),
    .in_2( s32 ),
    .in_3( s11 ),
    .out( s20 )
  );
  assign PC = PC_temp;
  assign type = type_temp;
endmodule


module DIG_RegisterFile
(
input [31:0] Din,
input we,
input [4:0] Rw,
input C,
input [4:0] Ra,
input [4:0] Rb,
output [31:0] Da,
output [31:0] Db
);

reg [31:0] memory[0:31];

assign Da = memory[Ra];
assign Db = memory[Rb];
initial
begin
memory[0]=0;
memory[1]=0;
memory[2]=0;
memory[3]=0;
memory[4]=0;
memory[5]=0;
memory[6]=0;
memory[7]=0;
memory[8]=0;
memory[9]=0;
memory[10]=0;
memory[11]=0;
memory[12]=0;
memory[13]=0;
memory[14]=0;
memory[15]=0;
memory[16]=0;
memory[17]=0;
memory[18]=0;
memory[19]=0;
memory[20]=0;
memory[21]=0;
memory[22]=0;
memory[23]=0;
memory[24]=0;
memory[25]=0;
memory[26]=0;
memory[27]=0;
memory[28]=0;
memory[29]=0;
memory[30]=0;
memory[31]=0;
end

always @ (posedge C) begin
if (we)
memory[Rw] <= Din;
end
endmodule


module DIG_Register
(
    input C,
    input en,
    input D,
    output Q
);

    reg  state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule
module PriorityEncoder2 (
    input in0,
    input in1,
    input in2,
    input in3,
    output reg [1:0] num,
    output any
);
    always @ (*) begin
        if (in3 == 1'b1)
            num = 2'h3;
        else if (in2 == 1'b1)
            num = 2'h2;
        else if (in1 == 1'b1)
            num = 2'h1;
        else 
            num = 2'h0;
    end

    assign any = in0 | in1 | in2 | in3;
endmodule


module \IF-ID  (
  input c1,
  input [31:0] pi1,
  input [31:0] ii1,
  input clr1,
  input en_IFID,
  input preJ_IFID,
  output [31:0] po1,
  output [31:0] io1,
  output preJo_IFID
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i0 (
    .sel( clr1 ),
    .in_0( pi1 ),
    .in_1( 32'b0 ),
    .out( s0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i1 (
    .sel( clr1 ),
    .in_0( ii1 ),
    .in_1( 32'b0 ),
    .out( s1 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( clr1 ),
    .in_0( preJ_IFID ),
    .in_1( 1'b0 ),
    .out( s2 )
  );
  // pc1
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i3 (
    .D( s0 ),
    .C( c1 ),
    .en( en_IFID ),
    .Q( po1 )
  );
  // ir1
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i4 (
    .D( s1 ),
    .C( c1 ),
    .en( en_IFID ),
    .Q( io1 )
  );
  DIG_Register DIG_Register_i5 (
    .D( s2 ),
    .C( c1 ),
    .en( en_IFID ),
    .Q( preJo_IFID )
  );
endmodule

module \ID-EX  (
  input [31:0] pi2, // pc input
  input [31:0] ii2,
  input preJ_IDEX,
  input [31:0] rai1,
  input [31:0] rbi1,
  input [31:0] con1,
  input clr2,
  input en2,
  input c2,
  input [31:0] csrIn1,
  output [31:0] po2,
  output [31:0] io2,
  output [31:0] ra1,
  output [31:0] cono1,
  output [31:0] rb1,
  output preJo_IDEX,
  output [31:0] \$csr 
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire [31:0] s4;
  wire s5;
  wire [31:0] s6;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i0 (
    .sel( clr2 ),
    .in_0( pi2 ),
    .in_1( 32'b0 ),
    .out( s0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i1 (
    .sel( clr2 ),
    .in_0( ii2 ),
    .in_1( 32'b0 ),
    .out( s1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i2 (
    .sel( clr2 ),
    .in_0( con1 ),
    .in_1( 32'b0 ),
    .out( s2 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i3 (
    .sel( clr2 ),
    .in_0( rai1 ),
    .in_1( 32'b0 ),
    .out( s3 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i4 (
    .sel( clr2 ),
    .in_0( rbi1 ),
    .in_1( 32'b0 ),
    .out( s4 )
  );
  Mux_2x1 Mux_2x1_i5 (
    .sel( clr2 ),
    .in_0( preJ_IDEX ),
    .in_1( 1'b0 ),
    .out( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( clr2 ),
    .in_0( csrIn1 ),
    .in_1( 32'b0 ),
    .out( s6 )
  );
  // pIn2
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i7 (
    .D( s0 ),
    .C( c2 ),
    .en( en2 ),
    .Q( po2 )
  );
  // iIn2
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i8 (
    .D( s1 ),
    .C( c2 ),
    .en( en2 ),
    .Q( io2 )
  );
  // controIn1
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i9 (
    .D( s2 ),
    .C( c2 ),
    .en( en2 ),
    .Q( cono1 )
  );
  // raI1
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i10 (
    .D( s3 ),
    .C( c2 ),
    .en( en2 ),
    .Q( ra1 )
  );
  // rbI1
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i11 (
    .D( s4 ),
    .C( c2 ),
    .en( en2 ),
    .Q( rb1 )
  );
  DIG_Register DIG_Register_i12 (
    .D( s5 ),
    .C( c2 ),
    .en( en2 ),
    .Q( preJo_IDEX )
  );
  // csr1
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i13 (
    .D( s6 ),
    .C( c2 ),
    .en( en2 ),
    .Q( \$csr  )
  );
endmodule

module CompSigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = $signed(a) > $signed(b);
    assign \= = $signed(a) == $signed(b);
    assign \< = $signed(a) < $signed(b);
endmodule

module PriorityEncoder3 (
    input in0,
    input in1,
    input in2,
    input in3,
    input in4,
    input in5,
    input in6,
    input in7,
    output reg [2:0] num,
    output any
);
    always @ (*) begin
        if (in7 == 1'b1)
            num = 3'h7;
        else if (in6 == 1'b1)
            num = 3'h6;
        else if (in5 == 1'b1)
            num = 3'h5;
        else if (in4 == 1'b1)
            num = 3'h4;
        else if (in3 == 1'b1)
            num = 3'h3;
        else if (in2 == 1'b1)
            num = 3'h2;
        else if (in1 == 1'b1)
            num = 3'h1;
        else 
            num = 3'h0;
    end

    assign any = in0 | in1 | in2 | in3 | in4 | in5 | in6 | in7;
endmodule

module PriorityEncoder4 (
    input in0,
    input in1,
    input in2,
    input in3,
    input in4,
    input in5,
    input in6,
    input in7,
    input in8,
    input in9,
    input in10,
    input in11,
    input in12,
    input in13,
    input in14,
    input in15,
    output reg [3:0] num,
    output any
);
    always @ (*) begin
        if (in15 == 1'b1)
            num = 4'hf;
        else if (in14 == 1'b1)
            num = 4'he;
        else if (in13 == 1'b1)
            num = 4'hd;
        else if (in12 == 1'b1)
            num = 4'hc;
        else if (in11 == 1'b1)
            num = 4'hb;
        else if (in10 == 1'b1)
            num = 4'ha;
        else if (in9 == 1'b1)
            num = 4'h9;
        else if (in8 == 1'b1)
            num = 4'h8;
        else if (in7 == 1'b1)
            num = 4'h7;
        else if (in6 == 1'b1)
            num = 4'h6;
        else if (in5 == 1'b1)
            num = 4'h5;
        else if (in4 == 1'b1)
            num = 4'h4;
        else if (in3 == 1'b1)
            num = 4'h3;
        else if (in2 == 1'b1)
            num = 4'h2;
        else if (in1 == 1'b1)
            num = 4'h1;
        else 
            num = 4'h0;
    end

    assign any = in0 | in1 | in2 | in3 | in4 | in5 | in6 | in7 | in8 | in9 | in10 | in11 | in12 | in13 | in14 | in15;
endmodule

module PriorityEncoder1 (
    input in0,
    input in1,
    output reg [0:0] num,
    output any
);
    always @ (*) begin
        if (in1 == 1'b1)
            num = 1'h1;
        else 
            num = 1'h0;
    end

    assign any = in0 | in1;
endmodule


module controller (
  input [31:0] ins,
  output [3:0] a_op,
  output [2:0] a_x,
  output [2:0] a_y,
  output rwe,
  output [1:0] rws, // ??????????ram?alu
  output mw, // memory write
  output [1:0] pcw, // pc?????????pc+4,jal bxx pc+????jalr pc+rs?
                    // 0->pc+4
                    // 1->jarl
                    // 2->jal
                    // 3->bxx
  output raR, // ra read
  output rbR, // ra read
  output csrR,
  output csrw,
  output bxx,
  output siC, // aluy?SEimm ???12?????????????????
              // 0????12??1????,sw,sh,sb???
  output jalrj, // jarl??
  output load, // ?????load?????????????
  output mR, // memory read
  output [2:0] mRF, // memory Read format
  output [1:0] mWF, // memory write format
  output mret,
  output wfi
);
  wire [2:0] fun3;
  wire [6:0] fun7;
  wire [1:0] ret;
  wire [4:0] inter;
  wire [7:0] op;
  wire lui;
  wire auipc;
  wire jal;
  wire jalrj_temp;
  wire \op==63 ;
  wire \op==03 ;
  wire \op==23 ;
  wire \op==13 ;
  wire \op==33 ;
  wire \op==0F ;
  wire \op==73 ;
  wire s0;
  wire beq;
  wire s1;
  wire bne;
  wire s2;
  wire blt;
  wire s3;
  wire bge;
  wire s4;
  wire bltu;
  wire s5;
  wire bgeu;
  wire s6;
  wire sb;
  wire s7;
  wire sh;
  wire s8;
  wire sw;
  wire s9;
  wire lb;
  wire s10;
  wire lh;
  wire s11;
  wire lw;
  wire s12;
  wire lbu;
  wire s13;
  wire lhu;
  wire s14;
  wire addi;
  wire s15;
  wire slti;
  wire s16;
  wire sltiu;
  wire s17;
  wire xori;
  wire s18;
  wire ori;
  wire s19;
  wire andi;
  wire s20;
  wire slli;
  wire s21;
  wire s22;
  wire srli;
  wire s23;
  wire s24;
  wire srai;
  wire s25;
  wire s26;
  wire add;
  wire s27;
  wire s28;
  wire sub;
  wire s29;
  wire sll;
  wire s30;
  wire slt;
  wire s31;
  wire sltu;
  wire s32;
  wire \xor ;
  wire s33;
  wire s34;
  wire srl;
  wire s35;
  wire s36;
  wire sra;
  wire s37;
  wire \or ;
  wire s38;
  wire \and ;
  wire s39;
  wire fence;
  wire s40;
  wire fencei;
  wire s41;
  wire s42;
  wire ecall;
  wire s43;
  wire s44;
  wire ebreak;
  wire s45;
  wire csrrw;
  wire s46;
  wire csrrs;
  wire s47;
  wire csrrc;
  wire s48;
  wire csrrwi;
  wire s49;
  wire csrrsi;
  wire s50;
  wire csrrci;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire s62;
  wire s63;
  wire s64;
  wire s65;
  wire s66;
  wire s67;
  wire s68;
  wire s69;
  wire s70;
  wire s71;
  wire s72;
  wire csrw_temp;
  wire s73;
  wire s74;
  wire s75;
  wire s76;
  wire s77;
  wire s78;
  assign op[6:0] = ins[6:0];
  assign op[7] = 1'b0;
  assign fun3 = ins[14:12];
  assign fun7 = ins[31:25];
  assign ret = ins[29:28];
  assign inter = ins[24:20];
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i0 (
    .a( op ),
    .b( 8'b110111 ),
    .\= ( lui )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i1 (
    .a( op ),
    .b( 8'b10111 ),
    .\= ( auipc )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i2 (
    .a( op ),
    .b( 8'b1101111 ),
    .\= ( jal )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i3 (
    .a( op ),
    .b( 8'b1100111 ),
    .\= ( jalrj_temp )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i4 (
    .a( op ),
    .b( 8'b1100011 ),
    .\= ( \op==63  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i5 (
    .a( op ),
    .b( 8'b11 ),
    .\= ( \op==03  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i6 (
    .a( op ),
    .b( 8'b100011 ),
    .\= ( \op==23  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i7 (
    .a( op ),
    .b( 8'b10011 ),
    .\= ( \op==13  )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i8 (
    .a( op ),
    .b( 8'b110011 ),
    .\= ( \op==33  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i9 (
    .a( op ),
    .b( 8'b1111 ),
    .\= ( \op==0F  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i10 (
    .a( op ),
    .b( 8'b1110011 ),
    .\= ( \op==73  )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i11 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s0 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i12 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s1 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i13 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s2 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i14 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s3 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i15 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s4 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i16 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i17 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s6 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i18 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s7 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i19 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s8 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i20 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s9 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i21 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s10 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i22 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s11 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i23 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s12 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i24 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s13 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i25 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s14 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i26 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s15 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i27 (
    .a( fun3 ),
    .b( 3'b11 ),
    .\= ( s16 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i28 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s17 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i29 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s18 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i30 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s19 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i31 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s20 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i32 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s21 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i33 (
    .a( fun7 ),
    .b( 7'b0 ),
    .\= ( s22 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i34 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s23 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i35 (
    .a( fun7 ),
    .b( 7'b100000 ),
    .\= ( s24 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i36 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s25 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i37 (
    .a( fun7 ),
    .b( 7'b0 ),
    .\= ( s26 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i38 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s27 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i39 (
    .a( fun7 ),
    .b( 7'b100000 ),
    .\= ( s28 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i40 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s29 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i41 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s30 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i42 (
    .a( fun3 ),
    .b( 3'b11 ),
    .\= ( s31 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i43 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s32 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i44 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s33 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i45 (
    .a( fun7 ),
    .b( 7'b0 ),
    .\= ( s34 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i46 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s35 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i47 (
    .a( fun7 ),
    .b( 7'b100000 ),
    .\= ( s36 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i48 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s37 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i49 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s38 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i50 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s39 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i51 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s40 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i52 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s41 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i53 (
    .a( inter ),
    .b( 5'b0 ),
    .\= ( s42 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i54 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s43 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i55 (
    .a( inter ),
    .b( 5'b1 ),
    .\= ( s44 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i56 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s45 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i57 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s46 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i58 (
    .a( fun3 ),
    .b( 3'b11 ),
    .\= ( s47 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i59 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s48 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i60 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s49 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i61 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s50 )
  );
  CompUnsigned #(
    .Bits(2)
  )
  CompUnsigned_i62 (
    .a( ret ),
    .b( 2'b11 ),
    .\= ( s75 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i63 (
    .a( inter ),
    .b( 5'b10 ),
    .\= ( s76 )
  );
  CompUnsigned #(
    .Bits(2)
  )
  CompUnsigned_i64 (
    .a( ret ),
    .b( 2'b1 ),
    .\= ( s77 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i65 (
    .a( inter ),
    .b( 5'b101 ),
    .\= ( s78 )
  );
  assign beq = (s0 & \op==63 );
  assign bne = (s1 & \op==63 );
  assign blt = (s2 & \op==63 );
  assign bge = (s3 & \op==63 );
  assign bltu = (s4 & \op==63 );
  assign bgeu = (s5 & \op==63 );
  assign sb = (s6 & \op==23 );
  assign sh = (s7 & \op==23 );
  assign sw = (s8 & \op==23 );
  assign lb = (s9 & \op==03 );
  assign lh = (s10 & \op==03 );
  assign lw = (s11 & \op==03 );
  assign lbu = (s12 & \op==03 );
  assign lhu = (s13 & \op==03 );
  assign addi = (s14 & \op==13 );
  assign slti = (s15 & \op==13 );
  assign sltiu = (s16 & \op==13 );
  assign xori = (s17 & \op==13 );
  assign ori = (s18 & \op==13 );
  assign andi = (s19 & \op==13 );
  assign slli = (s20 & \op==13 );
  assign srli = (s21 & s22 & \op==13 );
  assign srai = (s23 & s24 & \op==13 );
  assign add = (s25 & s26 & \op==33 );
  assign sub = (s27 & s28 & \op==33 );
  assign sll = (s29 & \op==33 );
  assign slt = (s30 & \op==33 );
  assign sltu = (s31 & \op==33 );
  assign \xor  = (s32 & \op==33 );
  assign srl = (s33 & s34 & \op==33 );
  assign sra = (s35 & s36 & \op==33 );
  assign \or  = (s37 & \op==33 );
  assign \and  = (s38 & \op==33 );
  assign fence = (s39 & \op==0F );
  assign fencei = (s40 & \op==0F );
  assign ecall = (s41 & s42 & \op==73 );
  assign ebreak = (s43 & s44 & \op==73 );
  assign csrrw = (s45 & \op==73 );
  assign csrrs = (s46 & \op==73 );
  assign csrrc = (s47 & \op==73 );
  assign csrrwi = (s48 & \op==73 );
  assign csrrsi = (s49 & \op==73 );
  assign csrrci = (s50 & \op==73 );
  assign s66 = (lui | auipc);
  assign s71 = (auipc | jalrj_temp | jal);
  assign s70 = (jal | jalrj_temp);
  assign mret = (s75 & s76 & \op==73 );
  assign wfi = (s77 & s78 & \op==73 );
  assign rwe = (srai | csrrci | csrrsi | csrrwi | csrrc | csrrs | csrrw | \and  | \or  | sra | srl | \xor  | sltu | slt | sll | sub | add | srli | slli | andi | ori | xori | sltiu | slti | addi | lhu | lbu | lw | lh | lb | jalrj_temp | jal | auipc | lui);
  assign mw = (sw | sh | sb);
  assign s52 = (lb | lbu | lw | lh | lhu);
  assign s53 = (csrrw | csrrs | csrrc | csrrwi | csrrsi | csrrci);
  assign s54 = (addi | auipc | add | jal | jalrj_temp | lw | lh | lhu | lb | lbu | sw | sh | sb);
  assign s55 = (slli | sll);
  assign s56 = (srli | srl);
  assign s57 = (srai | sra);
  assign s58 = (andi | \and  | csrrc | csrrci);
  assign s59 = (ori | \or  | csrrs | csrrsi);
  assign s60 = (xori | \xor );
  assign s61 = (slti | slt | blt);
  assign s62 = (sltiu | bltu | sltu);
  assign s64 = (addi | slti | sltiu | andi | ori | xori | lb | lw | lh | lhu | sw | sh | sb | lbu);
  assign s65 = (slli | srli | srai);
  assign s67 = (add | sub | slt | sltu | \and  | \or  | \xor  | beq | bne | blt | bltu | bge | bgeu);
  assign s68 = (sll | srl | sra);
  assign s69 = (csrrw | csrrs | csrrc | csrrsi | csrrci);
  assign s72 = (csrrsi | csrrwi);
  assign rbR = (add | sub | slt | sltu | \and  | \or  | \xor  | sll | srl | sra | beq | bne | blt | bltu | bge | bgeu | sw | sh | sb);
  assign raR = (addi | slti | sltiu | andi | ori | xori | slli | srli | srai | add | sub | slt | sltu | \and  | \or  | \xor  | sll | srl | sra | jalrj_temp | beq | bne | blt | bltu | bge | bgeu | lw | lh | lhu | lb | lbu | sw | sh | sb | csrrw | csrrs | csrrc);
  assign csrw_temp = (csrrw | csrrwi | csrrs | csrrsi | csrrc | csrrci);
  assign s73 = (addi | slti | sltiu | andi | ori | xori | lw | lh | lhu | lb | lbu);
  assign s74 = (sw | sh | sb);
  assign s63 = (csrrw | csrrwi);
  assign bxx = (beq | bne | blt | bltu | bge | bgeu);
  assign load = (lw | lh | lhu | lb | lbu);
  assign mR = (lw | lh | lhu | lb | lbu);
  // memRF
  PriorityEncoder3 PriorityEncoder3_i66 (
    .in0( lw ),
    .in1( lh ),
    .in2( lhu ),
    .in3( lb ),
    .in4( lbu ),
    .in5( 1'b0 ),
    .in6( 1'b0 ),
    .in7( 1'b0 ),
    .num( mRF )
  );
  // memWFormat
  PriorityEncoder2 PriorityEncoder2_i67 (
    .in0( sw ),
    .in1( sh ),
    .in2( sb ),
    .in3( 1'b0 ),
    .num( mWF )
  );
  assign s51 = (beq | bne | blt | bltu | bge | bgeu);
  // pcwPri
  PriorityEncoder2 PriorityEncoder2_i68 (
    .in0( 1'b1 ),
    .in1( jal ),
    .in2( s51 ),
    .in3( jalrj_temp ),
    .num( pcw )
  );
  // rwsPri
  PriorityEncoder2 PriorityEncoder2_i69 (
    .in0( 1'b1 ),
    .in1( s52 ),
    .in2( s53 ),
    .in3( 1'b0 ),
    .num( rws )
  );
  // aluopPri
  PriorityEncoder4 PriorityEncoder4_i70 (
    .in0( s54 ),
    .in1( sub ),
    .in2( s55 ),
    .in3( s56 ),
    .in4( s57 ),
    .in5( s58 ),
    .in6( s59 ),
    .in7( s60 ),
    .in8( bge ),
    .in9( s61 ),
    .in10( beq ),
    .in11( bgeu ),
    .in12( s62 ),
    .in13( bne ),
    .in14( lui ),
    .in15( s63 ),
    .num( a_op )
  );
  // aluyPri
  PriorityEncoder3 PriorityEncoder3_i71 (
    .in0( s64 ),
    .in1( s65 ),
    .in2( s66 ),
    .in3( s67 ),
    .in4( s68 ),
    .in5( s69 ),
    .in6( s70 ),
    .in7( csrrwi ),
    .num( a_y )
  );
  // aluxPri
  PriorityEncoder3 PriorityEncoder3_i72 (
    .in0( 1'b1 ),
    .in1( s71 ),
    .in2( s72 ),
    .in3( csrrc ),
    .in4( csrrci ),
    .in5( lui ),
    .in6( 1'b0 ),
    .in7( 1'b0 ),
    .num( a_x )
  );
  PriorityEncoder1 PriorityEncoder1_i73 (
    .in0( s73 ),
    .in1( s74 ),
    .num( siC )
  );
  assign csrR = csrw_temp;
  assign csrw = csrw_temp;
  assign jalrj = jalrj_temp;
endmodule

module bubble (
  input raRead,
  input rbRead,
  input [4:0] raAdd,
  input [4:0] rbAdd,
  input rwe_EX,
  input [4:0] rw_EX,
  input load,
  output bubble
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i0 (
    .a( rw_EX ),
    .b( 5'b0 ),
    .\= ( s0 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i1 (
    .a( raAdd ),
    .b( 5'b0 ),
    .\= ( s1 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i2 (
    .a( rbAdd ),
    .b( 5'b0 ),
    .\= ( s2 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i3 (
    .a( rw_EX ),
    .b( raAdd ),
    .\= ( s3 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i4 (
    .a( rw_EX ),
    .b( rbAdd ),
    .\= ( s4 )
  );
  assign bubble = (((~ s0 & ~ s1 & s3 & raRead & rwe_EX) | (~ s0 & ~ s2 & rbRead & s4 & rwe_EX)) & load);
endmodule

module judgePre (
  input bxxI,
  input preJI, // ?????????
  input [31:0] aluRI,
  input jalrj,
  output preRo // ????????

);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  assign s0 = (bxxI & aluRI[0]);
  Mux_2x1 Mux_2x1_i0 (
    .sel( bxxI ),
    .in_0( preJI ),
    .in_1( s0 ),
    .out( s1 )
  );
  CompUnsigned #(
    .Bits(1)
  )
  CompUnsigned_i1 (
    .a( s1 ),
    .b( preJI ),
    .\= ( s2 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( jalrj ),
    .in_0( s2 ),
    .in_1( 1'b0 ),
    .out( s3 )
  );
  assign preRo = ~ s3;
endmodule

module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule

module ShiftRightL #(
parameter Bits = 4,
parameter shiftBits=2
)
(
input [(Bits-1):0] in,
input [(shiftBits-1):0] shift,
output [(Bits - 1):0] out
);

assign out = (in >> shift);

endmodule
module ShiftRightA #(
parameter Bits = 4,
parameter shiftBits=2
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

assign out=($signed(in)>>>shift);

endmodule


module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module ALU (
  input [31:0] y,
  input [31:0] x,
  input [3:0] alu_op,
  output [31:0] rst
);
  wire [31:0] r1;
  wire [31:0] r2;
  wire [4:0] s0;
  wire [31:0] r3;
  wire [31:0] r4;
  wire [31:0] r5;
  wire [31:0] r6;
  wire [31:0] r7;
  wire [31:0] r8;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire [31:0] r9;
  wire [31:0] r10;
  wire [31:0] r11;
  wire [31:0] r12;
  wire [31:0] r13;
  wire [31:0] r14;
  // +
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( x ),
    .b( y ),
    .c_i( 1'b0 ),
    .s( r1 )
  );
  // -
  DIG_Sub #(
    .Bits(32)
  )
  DIG_Sub_i1 (
    .a( x ),
    .b( y ),
    .c_i( 1'b0 ),
    .s( r2 )
  );
  assign r6 = (x & y);
  assign r7 = (x | y);
  assign r8 = (x ^ y);
  // s>=<
  CompSigned #(
    .Bits(32)
  )
  CompSigned_i2 (
    .a( x ),
    .b( y ),
    .\> ( s1 ),
    .\= ( s2 ),
    .\< ( s3 )
  );
  // >=<
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i3 (
    .a( x ),
    .b( y ),
    .\> ( s4 ),
    .\= ( s5 ),
    .\< ( s6 )
  );
  assign s0 = y[4:0];
  // sll
  ShiftLeftL #(
    .Bits(32),
    .shiftBits(5)
  )
  ShiftLeftL_i4 (
    .in( x ),
    .shift( s0 ),
    .out( r3 )
  );
  // srl
  ShiftRightL #(
    .Bits(32),
    .shiftBits(5)
  )
  ShiftRightL_i5 (
    .in( x ),
    .shift( s0 ),
    .out( r4 )
  );
  // sra
  ShiftRightA #(
    .Bits(32),
    .shiftBits(5)
  )
  ShiftRightA_i6 (
    .in( x ),
    .shift( s0 ),
    .out( r5 )
  );
  assign r9[0] = (s1 | s2);
  assign r9[31:1] = 31'b0;
  assign r12[0] = (s4 | s5);
  assign r12[31:1] = 31'b0;
  assign r14[0] = ~ s5;
  assign r14[31:1] = 31'b0;
  assign r10[0] = s3;
  assign r10[31:1] = 31'b0;
  assign r11[0] = s2;
  assign r11[31:1] = 31'b0;
  assign r13[0] = s6;
  assign r13[31:1] = 31'b0;
  Mux_16x1_NBits #(
    .Bits(32)
  )
  Mux_16x1_NBits_i7 (
    .sel( alu_op ),
    .in_0( r1 ),
    .in_1( r2 ),
    .in_2( r3 ),
    .in_3( r4 ),
    .in_4( r5 ),
    .in_5( r6 ),
    .in_6( r7 ),
    .in_7( r8 ),
    .in_8( r9 ),
    .in_9( r10 ),
    .in_10( r11 ),
    .in_11( r12 ),
    .in_12( r13 ),
    .in_13( r14 ),
    .in_14( y ),
    .in_15( x ),
    .out( rst )
  );
endmodule

module ALUI (
  input [31:0] ins, // instruction
  input [31:0] rs1,
  input [31:0] opc,
  input [31:0] rs2,
  input [2:0] axI, // aluX input
  input [2:0] ayI, // aluy input
  input siC,
  input [31:0] csrIn,
  output [31:0] x,
  output [31:0] y
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire [31:0] s4;
  wire [31:0] s5;
  wire [31:0] s6;
  wire [31:0] s7;
  wire [31:0] s8;
  wire [11:0] s9;
  wire s10;
  wire [19:0] s11;
  wire s12;
  wire [19:0] s13;
  assign s0[4:0] = ins[19:15];
  assign s0[31:5] = 27'b0;
  assign s9[11:5] = ins[31:25];
  assign s9[4:0] = ins[11:7];
  assign s4[4:0] = ins[24:20];
  assign s4[31:5] = 27'b0;
  assign s5[31:12] = ins[31:12];
  assign s5[11:0] = 12'b0;
  assign s6[4:0] = rs2[4:0];
  assign s6[31:5] = 27'b0;
  assign s1 = ~ rs1;
  assign s10 = ins[31];
  assign s12 = ins[31];
  assign s2 = ~ s0;
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i0 (
    .sel( s10 ),
    .in_0( 20'b0 ),
    .in_1( 20'b11111111111111111111 ),
    .out( s11 )
  );
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i1 (
    .sel( s12 ),
    .in_0( 20'b0 ),
    .in_1( 20'b11111111111111111111 ),
    .out( s13 )
  );
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i2 (
    .sel( axI ),
    .in_0( rs1 ),
    .in_1( opc ),
    .in_2( s0 ),
    .in_3( s1 ),
    .in_4( s2 ),
    .in_5( 32'b0 ),
    .in_6( 32'b0 ),
    .in_7( 32'b0 ),
    .out( x )
  );
  assign s7[11:0] = ins[31:20];
  assign s7[31:12] = s11;
  assign s8[11:0] = s9;
  assign s8[31:12] = s13;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i3 (
    .sel( siC ),
    .in_0( s7 ),
    .in_1( s8 ),
    .out( s3 )
  );
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i4 (
    .sel( ayI ),
    .in_0( s3 ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( rs2 ),
    .in_4( s6 ),
    .in_5( csrIn ),
    .in_6( 32'b100 ),
    .in_7( 32'b0 ),
    .out( y )
  );
endmodule

module \EX-ME  (
  input [31:0] ii3,
  input en3,
  input clr3,
  input [31:0] rbi2,
  input [31:0] csri2,
  input [31:0] con2,
  input c3,
  input [31:0] aluRi1,
  output [31:0] cono2,
  output [31:0] csr2, // csr ?????
  output [31:0] rb2,
  output [31:0] aluRo1, // alu output
  output [31:0] io3
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire [31:0] s4;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i0 (
    .sel( clr3 ),
    .in_0( ii3 ),
    .in_1( 32'b0 ),
    .out( s0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i1 (
    .sel( clr3 ),
    .in_0( rbi2 ),
    .in_1( 32'b0 ),
    .out( s1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i2 (
    .sel( clr3 ),
    .in_0( csri2 ),
    .in_1( 32'b0 ),
    .out( s2 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i3 (
    .sel( clr3 ),
    .in_0( con2 ),
    .in_1( 32'b0 ),
    .out( s3 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i4 (
    .sel( clr3 ),
    .in_0( aluRi1 ),
    .in_1( 32'b0 ),
    .out( s4 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i5 (
    .D( s0 ),
    .C( c3 ),
    .en( en3 ),
    .Q( io3 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i6 (
    .D( s1 ),
    .C( c3 ),
    .en( en3 ),
    .Q( rb2 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i7 (
    .D( s2 ),
    .C( c3 ),
    .en( en3 ),
    .Q( csr2 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i8 (
    .D( s3 ),
    .C( c3 ),
    .en( en3 ),
    .Q( cono2 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i9 (
    .D( s4 ),
    .C( c3 ),
    .en( en3 ),
    .Q( aluRo1 )
  );
endmodule

module redirect (
  input raR,
  input rbR,
  input csrR,
  input rwe_ME,
  input rwe_WB,
  input csrwe_ME,
  input [4:0] raA,
  input [4:0] rbA,
  input [11:0] csrA,
  input [4:0] rw_ME,
  input [4:0] rw_WB,
  input [11:0] csrw_ME,
  input [11:0] csrw_WB,
  input csrwe_WB,
  output [3:0] aluRed, // aluRedirect
  output [1:0] csrRed // csrRedirect

);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i0 (
    .a( rw_ME ),
    .b( 5'b0 ),
    .\= ( s0 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i1 (
    .a( rw_WB ),
    .b( 5'b0 ),
    .\= ( s1 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i2 (
    .a( raA ),
    .b( 5'b0 ),
    .\= ( s2 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i3 (
    .a( rbA ),
    .b( 5'b0 ),
    .\= ( s3 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i4 (
    .a( rw_ME ),
    .b( raA ),
    .\= ( s4 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i5 (
    .a( rw_ME ),
    .b( rbA ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i6 (
    .a( rw_WB ),
    .b( raA ),
    .\= ( s6 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i7 (
    .a( rw_WB ),
    .b( rbA ),
    .\= ( s7 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i8 (
    .a( csrw_ME ),
    .b( csrA ),
    .\= ( s12 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i9 (
    .a( csrw_WB ),
    .b( csrA ),
    .\= ( s13 )
  );
  assign s8 = ~ s0;
  assign s10 = ~ s1;
  assign s9 = ~ s2;
  assign s11 = ~ s3;
  assign csrRed[0] = (s12 & csrR & csrwe_ME);
  assign csrRed[1] = (s13 & csrR & csrwe_WB);
  assign aluRed[0] = (s8 & s9 & s4 & raR & rwe_ME);
  assign aluRed[1] = (s8 & s11 & s5 & rbR & rwe_ME);
  assign aluRed[2] = (s10 & s9 & s6 & raR & rwe_WB);
  assign aluRed[3] = (s10 & s11 & s7 & rbR & rwe_WB);
endmodule

module \ME-WB  (
  input [31:0] ii4,
  input en4,
  input clr4,
  input c4,
  input [31:0] csri3,
  input [31:0] con3,
  input [31:0] aluRi2,
  input [31:0] ramIn,
  output [31:0] io4,
  output [31:0] cono3,
  output [31:0] csr3, // csr ?????
  output [31:0] aluRo2, // alu output
  output [31:0] ramOut // alu output

);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire [31:0] s4;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i0 (
    .sel( clr4 ),
    .in_0( con3 ),
    .in_1( 32'b0 ),
    .out( s0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i1 (
    .sel( clr4 ),
    .in_0( ii4 ),
    .in_1( 32'b0 ),
    .out( s1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i2 (
    .sel( clr4 ),
    .in_0( csri3 ),
    .in_1( 32'b0 ),
    .out( s2 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i3 (
    .sel( clr4 ),
    .in_0( aluRi2 ),
    .in_1( 32'b0 ),
    .out( s3 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i4 (
    .sel( clr4 ),
    .in_0( ramIn ),
    .in_1( 32'b0 ),
    .out( s4 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i5 (
    .D( s0 ),
    .C( c4 ),
    .en( en4 ),
    .Q( cono3 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i6 (
    .D( s1 ),
    .C( c4 ),
    .en( en4 ),
    .Q( io4 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i7 (
    .D( s2 ),
    .C( c4 ),
    .en( en4 ),
    .Q( csr3 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i8 (
    .D( s3 ),
    .C( c4 ),
    .en( en4 ),
    .Q( aluRo2 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i9 (
    .D( s4 ),
    .C( c4 ),
    .en( en4 ),
    .Q( ramOut )
  );
endmodule

module DIG_Counter_1bit(
    output out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module \risc-v-cpu  (
  input clock,
  input enable,
  input clear,
  input reset,
  output [7:0] clkCount,
  output [7:0] pcOut,
  output inter,
  output ret,
  output [1:0] status,
  output [1:0] exeStatus,
  output interp1,
  output interp2,
  output interp3
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire en_IFID;
  wire s3;
  wire [31:0] s4;
  wire [31:0] s5;
  wire s6;
  wire [3:0] s7;
  wire [2:0] s8;
  wire [2:0] s9;
  wire s10;
  wire [1:0] s11;
  wire s12;
  wire [1:0] s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire [2:0] s23;
  wire [1:0] s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire [4:0] s29;
  wire [4:0] s30;
  wire s31;
  wire [4:0] s32;
  wire s33;
  wire bubble;
  wire [7:0] s34;
  wire [31:0] s35;
  wire s36;
  wire [31:0] mepc;
  wire [31:0] s37;
  wire [31:0] s38;
  wire [31:0] s39;
  wire clear_IDEX;
  wire s40;
  wire [31:0] s41;
  wire [31:0] s42;
  wire [31:0] s43;
  wire [31:0] s44;
  wire [31:0] s45;
  wire s46;
  wire [31:0] s47;
  wire ret_temp;
  wire preJF;
  wire [31:0] rs1;
  wire [31:0] mpc;
  wire [1:0] status_temp;
  wire inter_temp;
  wire [7:0] s48;
  wire s49;
  wire s50;
  wire [31:0] s51;
  wire s52;
  wire [31:0] s53;
  wire [31:0] s54;
  wire [3:0] s55;
  wire [31:0] s56;
  wire [2:0] s57;
  wire [2:0] s58;
  wire s59;
  wire [31:0] s60;
  wire s61;
  wire [31:0] s62;
  wire [31:0] s63;
  wire [31:0] s64;
  wire [31:0] s65;
  wire [31:0] s66;
  wire s67;
  wire s68;
  wire s69;
  wire [4:0] s70;
  wire [4:0] s71;
  wire [11:0] s72;
  wire [7:0] s73;
  wire [31:0] s74;
  wire s75;
  wire s76;
  wire s77;
  wire [1:0] s78;
  wire s79;
  wire s80;
  wire [1:0] rws1;
  wire s81;
  wire [4:0] s82;
  wire [4:0] s83;
  wire [11:0] s84;
  wire [11:0] s85;
  wire s86;
  wire [3:0] aluRedirect;
  wire [1:0] csrRedirect;
  wire [31:0] s87;
  wire [1:0] rws2;
  wire [31:0] s88;
  wire [1:0] s89;
  wire [1:0] s90;
  wire [31:0] s91;
  wire [31:0] s92;
  wire [31:0] s93;
  wire [31:0] s94;
  wire [31:0] s95;
  wire [31:0] s96;
  wire [31:0] s97;
  wire [31:0] s98;
  wire [31:0] s99;
  wire [31:0] s100;
  wire s101;
  wire [23:0] s102;
  wire [7:0] s103;
  wire [31:0] s104;
  wire s105;
  wire [15:0] s106;
  wire [15:0] s107;
  wire [31:0] s108;
  wire [2:0] s109;
  wire [31:0] s110;
  wire [31:0] s111;
  wire [31:0] s112;
  wire [4:0] s113;
  wire [4:0] s114;
  wire s115;
  wire s116;
  wire s117;
  wire [4:0] s118;
  wire [7:0] s119;
  wire s120;
  wire s121;
  wire s122;
  wire [31:0] s123;
  wire interp1_temp;
  wire interp2_temp;
  wire interp3_temp;
  wire s124;
  wire s125;
  wire s126;
  wire s127;
  wire s128;
  wire s129;
  wire s130;
  wire inter1;
  wire s131;
  wire inter2;
  wire s132;
  wire inter3;
  wire [1:0] s133;
  wire s134;
  wire [1:0] exeStatus_temp;
  wire [1:0] s135;
  wire s136;
  wire s137;
  wire s138;
  wire [1:0] s139;
  wire interO;
  wire interbubble;
  wire s140;
  wire s141;
  wire [31:0] s142;
  wire [31:0] s143;
  wire [31:0] s144;
  wire s145;
  wire s146;
  assign s49 = ~ clock;
  assign s76 = ~ clock;
  assign s117 = ~ clock;
  DIG_Counter_Nbit #(
    .Bits(32)
  )
  DIG_Counter_Nbit_i0 (
    .en( enable ),
    .C( clock ),
    .clr( 1'b0 ),
    .out( s142 )
  );
  DIG_Counter_Nbit #(
    .Bits(32)
  )
  DIG_Counter_Nbit_i1 (
    .en( enable ),
    .C( clock ),
    .clr( 1'b0 ),
    .out( s143 )
  );
  DIG_Counter_Nbit #(
    .Bits(32)
  )
  DIG_Counter_Nbit_i2 (
    .en( enable ),
    .C( clock ),
    .clr( 1'b0 ),
    .out( s144 )
  );
  DIG_Counter_Nbit #(
    .Bits(8)
  )
  DIG_Counter_Nbit_i3 (
    .en( enable ),
    .C( clock ),
    .clr( 1'b0 ),
    .out( clkCount )
  );
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i4 (
    .a( s142 ),
    .b( 32'b11 ),
    .\= ( inter1 )
  );
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i5 (
    .a( s143 ),
    .b( 32'b1010 ),
    .\= ( inter2 )
  );
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i6 (
    .a( s144 ),
    .b( 32'b1010 ),
    .\= ( inter3 )
  );
  Mux_2x1 Mux_2x1_i7 (
    .sel( inter1 ),
    .in_0( 1'b0 ),
    .in_1( 1'b1 ),
    .out( s124 )
  );
  Mux_2x1 Mux_2x1_i8 (
    .sel( inter2 ),
    .in_0( 1'b0 ),
    .in_1( 1'b1 ),
    .out( s126 )
  );
  Mux_2x1 Mux_2x1_i9 (
    .sel( inter3 ),
    .in_0( 1'b0 ),
    .in_1( 1'b1 ),
    .out( s128 )
  );
  // csr
  csr csr_i10 (
    .WrAddress( s34 ),
    .RdAddress( 8'b0 ),
    .Data( s35 ),
    .WE( s36 ),
    .RdClockEn( 1'b1 ),
    .RdClock( clock ),
    .WrClockEn( s36 ),
    .WrClock( clock ),
    .Reset( reset ),
    .Q( mepc )
  );
  assign en_IFID = (~ bubble & enable);
  brachPre brachPre_i11 (
    .instr( s42 ),
    .rs1( rs1 ),
    .pcws( 3'b0 ),
    .romD( s1 ),
    .preRI( preJF ),
    .clock( clock ),
    .pcen( enable ),
    .bubble( bubble ),
    .oPc( s41 ),
    .ret( ret_temp ),
    .mePc( mpc ),
    .status( status_temp ),
    .inters( inter_temp ),
    .PC( s0 ),
    .preJPc( s3 )
  );
  // rom1
  rom1 rom1_i12 (
    .Address( s48 ),
    .OutClock( s49 ),
    .OutClockEn( 1'b1 ),
    .Reset( 1'b0 ),
    .Q( s1 )
  );
  // ram1
  ram1 ram1_i13 (
    .WrAddress( s73 ),
    .RdAddress( s73 ),
    .Data( s74 ),
    .WE( 1'b1 ),
    .RdClockEn( s75 ),
    .RdClock( s76 ),
    .WrClockEn( s77 ),
    .WrClock( s76 ),
    .Reset( reset ),
    .Q( mpc )
  );
  DIG_RegisterFile DIG_RegisterFile_i14 (
    .Din( s97 ),
    .we( s116 ),
    .Rw( s83 ),
    .C( s117 ),
    .Ra( s113 ),
    .Rb( s114 ),
    .Da( s37 ),
    .Db( s38 )
  );
  DIG_Register DIG_Register_i15 (
    .D( s124 ),
    .C( clock ),
    .en( s125 ),
    .Q( interp1_temp )
  );
  DIG_Register DIG_Register_i16 (
    .D( s126 ),
    .C( clock ),
    .en( s127 ),
    .Q( interp2_temp )
  );
  DIG_Register DIG_Register_i17 (
    .D( s128 ),
    .C( clock ),
    .en( s129 ),
    .Q( interp3_temp )
  );
  assign s125 = ((s130 & inter_temp) | inter1);
  assign s127 = ((s131 & inter_temp) | inter2);
  assign s129 = ((s132 & inter_temp) | inter3);
  PriorityEncoder2 PriorityEncoder2_i18 (
    .in0( 1'b0 ),
    .in1( interp1_temp ),
    .in2( interp2_temp ),
    .in3( interp3_temp ),
    .num( status_temp )
  );
  assign s107 = mpc[15:0];
  assign s103 = mpc[7:0];
  assign s48 = s0[9:2];
  assign s135 = mpc[31:30];
  assign s110[31:16] = 16'b0;
  assign s110[15:0] = s107;
  assign s111[7:0] = s103;
  assign s111[31:8] = 24'b0;
  CompUnsigned #(
    .Bits(2)
  )
  CompUnsigned_i19 (
    .a( status_temp ),
    .b( 2'b1 ),
    .\= ( s130 )
  );
  CompUnsigned #(
    .Bits(2)
  )
  CompUnsigned_i20 (
    .a( status_temp ),
    .b( 2'b10 ),
    .\= ( s131 )
  );
  CompUnsigned #(
    .Bits(2)
  )
  CompUnsigned_i21 (
    .a( status_temp ),
    .b( 2'b11 ),
    .\= ( s132 )
  );
  assign s105 = s107[15];
  assign s101 = s103[7];
  Mux_2x1_NBits #(
    .Bits(24)
  )
  Mux_2x1_NBits_i22 (
    .sel( s101 ),
    .in_0( 24'b0 ),
    .in_1( 24'b111111111111111111111111 ),
    .out( s102 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i23 (
    .sel( s105 ),
    .in_0( 16'b0 ),
    .in_1( 16'b1111111111111111 ),
    .out( s106 )
  );
  assign s104[7:0] = s103;
  assign s104[31:8] = s102;
  assign s108[15:0] = s107;
  assign s108[31:16] = s106;
  \IF-ID  \IF-ID_i24 (
    .c1( clock ),
    .pi1( s0 ),
    .ii1( s1 ),
    .clr1( s2 ),
    .en_IFID( en_IFID ),
    .preJ_IFID( s3 ),
    .po1( s4 ),
    .io1( s5 ),
    .preJo_IFID( s6 )
  );
  \ID-EX  \ID-EX_i25 (
    .pi2( s4 ),
    .ii2( s5 ),
    .preJ_IDEX( s6 ),
    .rai1( s37 ),
    .rbi1( s38 ),
    .con1( s39 ),
    .clr2( clear_IDEX ),
    .en2( s40 ),
    .c2( clock ),
    .csrIn1( mepc ),
    .po2( s41 ),
    .io2( s42 ),
    .ra1( s43 ),
    .cono1( s44 ),
    .rb1( s45 ),
    .preJo_IDEX( s46 ),
    .\$csr ( s47 )
  );
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i26 (
    .sel( s109 ),
    .in_0( mpc ),
    .in_1( s108 ),
    .in_2( s110 ),
    .in_3( s104 ),
    .in_4( s111 ),
    .in_5( 32'b0 ),
    .in_6( 32'b0 ),
    .in_7( 32'b0 ),
    .out( s112 )
  );
  Mux_2x1_NBits #(
    .Bits(2)
  )
  Mux_2x1_NBits_i27 (
    .sel( ret_temp ),
    .in_0( status_temp ),
    .in_1( s135 ),
    .out( s133 )
  );
  CompUnsigned #(
    .Bits(2)
  )
  CompUnsigned_i28 (
    .a( exeStatus_temp ),
    .b( status_temp ),
    .\< ( s136 )
  );
  assign inter_temp = (((interO & interbubble & ~ mepc[29]) | (s146 & interO)) & s136);
  controller controller_i29 (
    .ins( s5 ),
    .a_op( s7 ),
    .a_x( s8 ),
    .a_y( s9 ),
    .rwe( s10 ),
    .rws( s11 ),
    .mw( s12 ),
    .pcw( s13 ),
    .raR( s14 ),
    .rbR( s15 ),
    .csrR( s16 ),
    .csrw( s17 ),
    .bxx( s18 ),
    .siC( s19 ),
    .jalrj( s20 ),
    .load( s21 ),
    .mR( s22 ),
    .mRF( s23 ),
    .mWF( s24 ),
    .mret( s25 ),
    .wfi( s26 )
  );
  assign s61 = ~ inter_temp;
  assign s115 = ~ inter_temp;
  assign s40 = ~ inter_temp;
  assign s29 = s5[19:15];
  assign s30 = s5[24:20];
  assign s67 = s44[16];
  assign s68 = s44[17];
  assign s69 = s44[18];
  assign s70 = s42[19:15];
  assign s71 = s42[24:20];
  assign s72 = s42[31:20];
  assign s57 = s44[6:4];
  assign s58 = s44[9:7];
  assign s59 = s44[21];
  assign s55 = s44[3:0];
  assign s50 = s44[20];
  assign s52 = s44[22];
  assign s31 = s44[10];
  assign s33 = s44[23];
  assign ret_temp = s44[30];
  assign s32 = s42[11:7];
  assign s113 = s5[19:15];
  assign s114 = s5[24:20];
  assign pcOut = s41[7:0];
  assign s39[3:0] = s7;
  assign s39[6:4] = s8;
  assign s39[9:7] = s9;
  assign s39[10] = s10;
  assign s39[12:11] = s11;
  assign s39[13] = s12;
  assign s39[15:14] = s13;
  assign s39[16] = s14;
  assign s39[17] = s15;
  assign s39[18] = s16;
  assign s39[19] = s17;
  assign s39[20] = s18;
  assign s39[21] = s19;
  assign s39[22] = s20;
  assign s39[23] = s21;
  assign s39[24] = s22;
  assign s39[27:25] = s23;
  assign s39[29:28] = s24;
  assign s39[30] = s25;
  assign s39[31] = s26;
  assign s134 = (ret_temp | inter_temp);
  assign s145 = (inter_temp | ret_temp);
  // Reg1
  DIG_Register_BUS #(
    .Bits(2)
  )
  DIG_Register_BUS_i30 (
    .D( s133 ),
    .C( clock ),
    .en( s134 ),
    .Q( exeStatus_temp )
  );
  // Reg2
  DIG_Register DIG_Register_i31 (
    .D( ret_temp ),
    .C( clock ),
    .en( s145 ),
    .Q( s146 )
  );
  assign s27 = s39[16];
  assign s28 = s39[17];
  bubble bubble_i32 (
    .raRead( s27 ),
    .rbRead( s28 ),
    .raAdd( s29 ),
    .rbAdd( s30 ),
    .rwe_EX( s31 ),
    .rw_EX( s32 ),
    .load( s33 ),
    .bubble( bubble )
  );
  assign s123[28:0] = s41[28:0];
  assign s123[29] = 1'b1;
  assign s123[31:30] = exeStatus_temp;
  assign clear_IDEX = (bubble | ret_temp | preJF);
  judgePre judgePre_i33 (
    .bxxI( s50 ),
    .preJI( s46 ),
    .aluRI( s51 ),
    .jalrj( s52 ),
    .preRo( preJF )
  );
  ALU ALU_i34 (
    .y( s53 ),
    .x( s54 ),
    .alu_op( s55 ),
    .rst( s51 )
  );
  ALUI ALUI_i35 (
    .ins( s42 ),
    .rs1( rs1 ),
    .opc( s41 ),
    .rs2( s56 ),
    .axI( s57 ),
    .ayI( s58 ),
    .siC( s59 ),
    .csrIn( s60 ),
    .x( s54 ),
    .y( s53 )
  );
  \EX-ME  \EX-ME_i36 (
    .ii3( s42 ),
    .en3( s61 ),
    .clr3( 1'b0 ),
    .rbi2( s56 ),
    .csri2( s60 ),
    .con2( s44 ),
    .c3( clock ),
    .aluRi1( s51 ),
    .cono2( s62 ),
    .csr2( s63 ),
    .rb2( s64 ),
    .aluRo1( s65 ),
    .io3( s66 )
  );
  redirect redirect_i37 (
    .raR( s67 ),
    .rbR( s68 ),
    .csrR( s69 ),
    .rwe_ME( s79 ),
    .rwe_WB( s81 ),
    .csrwe_ME( s80 ),
    .raA( s70 ),
    .rbA( s71 ),
    .csrA( s72 ),
    .rw_ME( s82 ),
    .rw_WB( s83 ),
    .csrw_ME( s84 ),
    .csrw_WB( s85 ),
    .csrwe_WB( s86 ),
    .aluRed( aluRedirect ),
    .csrRed( csrRedirect )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i38 (
    .sel( s90 ),
    .in_0( s45 ),
    .in_1( s96 ),
    .in_2( s97 ),
    .in_3( s96 ),
    .out( s56 )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i39 (
    .sel( s89 ),
    .in_0( s43 ),
    .in_1( s91 ),
    .in_2( s95 ),
    .in_3( s91 ),
    .out( rs1 )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i40 (
    .sel( csrRedirect ),
    .in_0( s47 ),
    .in_1( s65 ),
    .in_2( s92 ),
    .in_3( s65 ),
    .out( s60 )
  );
  \ME-WB  \ME-WB_i41 (
    .ii4( s66 ),
    .en4( s115 ),
    .clr4( 1'b0 ),
    .c4( clock ),
    .csri3( s63 ),
    .con3( s62 ),
    .aluRi2( s65 ),
    .ramIn( s112 ),
    .io4( s88 ),
    .cono3( s87 ),
    .csr3( s94 ),
    .aluRo2( s92 ),
    .ramOut( s93 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i42 (
    .sel( inter_temp ),
    .in_0( s92 ),
    .in_1( s123 ),
    .out( s35 )
  );
  Mux_2x1 Mux_2x1_i43 (
    .sel( inter_temp ),
    .in_0( s122 ),
    .in_1( 1'b1 ),
    .out( s36 )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i44 (
    .sel( inter_temp ),
    .in_0( s119 ),
    .in_1( 8'b0 ),
    .out( s34 )
  );
  assign s2 = (preJF | ret_temp | inter_temp);
  assign s138 = (preJF | ret_temp);
  DIG_Counter_1bit DIG_Counter_1bit_i45 (
    .en( s140 ),
    .C( clock ),
    .clr( bubble ),
    .out( s141 )
  );
  assign s89[0] = aluRedirect[0];
  assign s89[1] = aluRedirect[2];
  assign s90[0] = aluRedirect[1];
  assign s90[1] = aluRedirect[3];
  assign s99[15:0] = s64[15:0];
  assign s99[31:16] = 16'b0;
  assign s100[7:0] = s64[7:0];
  assign s100[31:8] = 24'b0;
  CompUnsigned #(
    .Bits(1)
  )
  CompUnsigned_i46 (
    .a( s141 ),
    .b( 1'b1 ),
    .\= ( interbubble )
  );
  assign s78 = s62[29:28];
  assign s77 = s62[13];
  assign s75 = s62[24];
  assign s79 = s62[10];
  assign s80 = s62[19];
  assign rws1 = s62[12:11];
  assign rws2 = s87[12:11];
  assign s81 = s87[10];
  assign s86 = s87[19];
  assign s82 = s66[11:7];
  assign s84 = s66[31:20];
  assign s83 = s88[11:7];
  assign s85 = s88[31:20];
  assign s98 = s64[31:0];
  assign s73 = s65[9:2];
  assign s109 = s87[27:25];
  assign s118 = s88[19:15];
  assign s119 = s88[27:20];
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i47 (
    .sel( rws1 ),
    .in_0( s65 ),
    .in_1( 32'b0 ),
    .in_2( s63 ),
    .in_3( 32'b0 ),
    .out( s91 )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i48 (
    .sel( rws2 ),
    .in_0( s92 ),
    .in_1( s93 ),
    .in_2( s94 ),
    .in_3( 32'b0 ),
    .out( s95 )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i49 (
    .sel( rws1 ),
    .in_0( s65 ),
    .in_1( 32'b0 ),
    .in_2( s63 ),
    .in_3( 32'b0 ),
    .out( s96 )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i50 (
    .sel( rws2 ),
    .in_0( s92 ),
    .in_1( s93 ),
    .in_2( s94 ),
    .in_3( 32'b0 ),
    .out( s97 )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i51 (
    .sel( s78 ),
    .in_0( s98 ),
    .in_1( s99 ),
    .in_2( s100 ),
    .in_3( 32'b0 ),
    .out( s74 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i52 (
    .a( s83 ),
    .b( 5'b0 ),
    .\= ( s120 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i53 (
    .a( 5'b0 ),
    .b( s118 ),
    .\= ( s121 )
  );
  assign s140 = ~ interbubble;
  assign s116 = (s81 & ~ s120);
  assign s122 = (~ s121 & s86);
  DIG_Counter_Nbit #(
    .Bits(2)
  )
  DIG_Counter_Nbit_i54 (
    .en( s137 ),
    .C( clock ),
    .clr( s138 ),
    .out( s139 )
  );
  CompUnsigned #(
    .Bits(2)
  )
  CompUnsigned_i55 (
    .a( s139 ),
    .b( 2'b10 ),
    .\= ( interO )
  );
  assign s137 = ~ interO;
  assign inter = inter_temp;
  assign ret = ret_temp;
  assign status = status_temp;
  assign exeStatus = exeStatus_temp;
  assign interp1 = interp1_temp;
  assign interp2 = interp2_temp;
  assign interp3 = interp3_temp;
endmodule
