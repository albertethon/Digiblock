/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule

module DIG_RegisterFile
(
input [31:0] Din,
input we,
input [4:0] Rw,
input C,
input [4:0] Ra,
input [4:0] Rb,
output [31:0] Da,
output [31:0] Db
);

reg [31:0] memory[0:31];

assign Da = memory[Ra];
assign Db = memory[Rb];
initial
begin
memory[0]=0;
memory[1]=0;
memory[2]=0;
memory[3]=0;
memory[4]=0;
memory[5]=0;
memory[6]=0;
memory[7]=0;
memory[8]=0;
memory[9]=0;
memory[10]=0;
memory[11]=0;
memory[12]=0;
memory[13]=0;
memory[14]=0;
memory[15]=0;
memory[16]=0;
memory[17]=0;
memory[18]=0;
memory[19]=0;
memory[20]=0;
memory[21]=0;
memory[22]=0;
memory[23]=0;
memory[24]=0;
memory[25]=0;
memory[26]=0;
memory[27]=0;
memory[28]=0;
memory[29]=0;
memory[30]=0;
memory[31]=0;
end

always @ (posedge C) begin
if (we)
memory[Rw] <= Din;
end
endmodule



module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module CompSigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = $signed(a) > $signed(b);
    assign \= = $signed(a) == $signed(b);
    assign \< = $signed(a) < $signed(b);
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule

module PriorityEncoder4 (
    input in0,
    input in1,
    input in2,
    input in3,
    input in4,
    input in5,
    input in6,
    input in7,
    input in8,
    input in9,
    input in10,
    input in11,
    input in12,
    input in13,
    input in14,
    input in15,
    output reg [3:0] num,
    output any
);
    always @ (*) begin
        if (in15 == 1'b1)
            num = 4'hf;
        else if (in14 == 1'b1)
            num = 4'he;
        else if (in13 == 1'b1)
            num = 4'hd;
        else if (in12 == 1'b1)
            num = 4'hc;
        else if (in11 == 1'b1)
            num = 4'hb;
        else if (in10 == 1'b1)
            num = 4'ha;
        else if (in9 == 1'b1)
            num = 4'h9;
        else if (in8 == 1'b1)
            num = 4'h8;
        else if (in7 == 1'b1)
            num = 4'h7;
        else if (in6 == 1'b1)
            num = 4'h6;
        else if (in5 == 1'b1)
            num = 4'h5;
        else if (in4 == 1'b1)
            num = 4'h4;
        else if (in3 == 1'b1)
            num = 4'h3;
        else if (in2 == 1'b1)
            num = 4'h2;
        else if (in1 == 1'b1)
            num = 4'h1;
        else 
            num = 4'h0;
    end

    assign any = in0 | in1 | in2 | in3 | in4 | in5 | in6 | in7 | in8 | in9 | in10 | in11 | in12 | in13 | in14 | in15;
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule



module \risc-v-micro-controller  (
  input int, // ????
  input clock,
  input [31:0] ins,
  input en,
  output [3:0] alu_op,
  output csrW,
  output bxx,
  output Irw,
  output mr,
  output [1:0] mwf,
  output mw,
  output rwe,
  output [2:0] rws,
  output [2:0] aluy,
  output [2:0] alux,
  output pcEn,
  output pcsrc,
  output jump
);
  wire [7:0] op;
  wire lui;
  wire auipc;
  wire jal;
  wire jalr;
  wire \op==63 ;
  wire \op==03 ;
  wire \op==23 ;
  wire \op==13 ;
  wire \op==33 ;
  wire \op==0F ;
  wire \op==73 ;
  wire [2:0] fun3;
  wire s0;
  wire beq;
  wire s1;
  wire bne;
  wire s2;
  wire blt;
  wire s3;
  wire bge;
  wire s4;
  wire bltu;
  wire s5;
  wire bgeu;
  wire s6;
  wire sb;
  wire s7;
  wire sh;
  wire s8;
  wire sw;
  wire s9;
  wire lb;
  wire s10;
  wire lh;
  wire s11;
  wire lw;
  wire s12;
  wire lbu;
  wire s13;
  wire lhu;
  wire s14;
  wire addi;
  wire s15;
  wire slti;
  wire s16;
  wire sltiu;
  wire s17;
  wire xori;
  wire s18;
  wire ori;
  wire s19;
  wire andi;
  wire s20;
  wire slli;
  wire s21;
  wire s22;
  wire srli;
  wire [6:0] fun7;
  wire s23;
  wire s24;
  wire srai;
  wire s25;
  wire s26;
  wire add;
  wire s27;
  wire s28;
  wire sub;
  wire s29;
  wire sll;
  wire s30;
  wire slt;
  wire s31;
  wire sltu;
  wire s32;
  wire \xor ;
  wire s33;
  wire s34;
  wire srl;
  wire s35;
  wire s36;
  wire sra;
  wire s37;
  wire \or ;
  wire s38;
  wire \and ;
  wire s39;
  wire fence;
  wire s40;
  wire fencei;
  wire s41;
  wire s42;
  wire ecall;
  wire ecallBreak;
  wire s43;
  wire s44;
  wire ebreak;
  wire s45;
  wire csrrw;
  wire s46;
  wire s47;
  wire csrrc;
  wire s48;
  wire csrrwi;
  wire s49;
  wire s50;
  wire csrrci;
  wire aluCon;
  wire [3:0] s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire [6:0] s62;
  wire s63;
  wire [6:0] s64;
  wire [31:0] s65;
  wire [6:0] s66;
  wire N1;
  wire [6:0] s67;
  wire [6:0] s68;
  wire add_type;
  wire bxx_type;
  wire u_type;
  wire s69;
  assign op[6:0] = ins[6:0];
  assign op[7] = 1'b0;
  assign s63 = ~ clock;
  assign fun3 = ins[14:12];
  assign fun7 = ins[31:25];
  assign ecallBreak = ins[20];
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i0 (
    .a( op ),
    .b( 8'b110111 ),
    .\= ( lui )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i1 (
    .a( op ),
    .b( 8'b10111 ),
    .\= ( auipc )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i2 (
    .a( op ),
    .b( 8'b1101111 ),
    .\= ( jal )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i3 (
    .a( op ),
    .b( 8'b1100111 ),
    .\= ( jalr )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i4 (
    .a( op ),
    .b( 8'b1100011 ),
    .\= ( \op==63  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i5 (
    .a( op ),
    .b( 8'b11 ),
    .\= ( \op==03  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i6 (
    .a( op ),
    .b( 8'b100011 ),
    .\= ( \op==23  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i7 (
    .a( op ),
    .b( 8'b10011 ),
    .\= ( \op==13  )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i8 (
    .a( op ),
    .b( 8'b110011 ),
    .\= ( \op==33  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i9 (
    .a( op ),
    .b( 8'b1111 ),
    .\= ( \op==0F  )
  );
  CompSigned #(
    .Bits(8)
  )
  CompSigned_i10 (
    .a( op ),
    .b( 8'b1110011 ),
    .\= ( \op==73  )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i11 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s0 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i12 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s1 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i13 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s2 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i14 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s3 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i15 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s4 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i16 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i17 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s6 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i18 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s7 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i19 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s8 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i20 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s9 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i21 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s10 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i22 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s11 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i23 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s12 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i24 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s13 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i25 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s14 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i26 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s15 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i27 (
    .a( fun3 ),
    .b( 3'b11 ),
    .\= ( s16 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i28 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s17 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i29 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s18 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i30 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s19 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i31 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s20 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i32 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s21 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i33 (
    .a( fun7 ),
    .b( 7'b0 ),
    .\= ( s22 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i34 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s23 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i35 (
    .a( fun7 ),
    .b( 7'b100000 ),
    .\= ( s24 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i36 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s25 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i37 (
    .a( fun7 ),
    .b( 7'b0 ),
    .\= ( s26 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i38 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s27 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i39 (
    .a( fun7 ),
    .b( 7'b100000 ),
    .\= ( s28 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i40 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s29 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i41 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s30 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i42 (
    .a( fun3 ),
    .b( 3'b11 ),
    .\= ( s31 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i43 (
    .a( fun3 ),
    .b( 3'b100 ),
    .\= ( s32 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i44 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s33 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i45 (
    .a( fun7 ),
    .b( 7'b0 ),
    .\= ( s34 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i46 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s35 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i47 (
    .a( fun7 ),
    .b( 7'b100000 ),
    .\= ( s36 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i48 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s37 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i49 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s38 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i50 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s39 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i51 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s40 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i52 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s41 )
  );
  CompUnsigned #(
    .Bits(1)
  )
  CompUnsigned_i53 (
    .a( ecallBreak ),
    .b( 1'b0 ),
    .\= ( s42 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i54 (
    .a( fun3 ),
    .b( 3'b0 ),
    .\= ( s43 )
  );
  CompUnsigned #(
    .Bits(1)
  )
  CompUnsigned_i55 (
    .a( ecallBreak ),
    .b( 1'b1 ),
    .\= ( s44 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i56 (
    .a( fun3 ),
    .b( 3'b1 ),
    .\= ( s45 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i57 (
    .a( fun3 ),
    .b( 3'b10 ),
    .\= ( s46 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i58 (
    .a( fun3 ),
    .b( 3'b11 ),
    .\= ( s47 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i59 (
    .a( fun3 ),
    .b( 3'b101 ),
    .\= ( s48 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i60 (
    .a( fun3 ),
    .b( 3'b110 ),
    .\= ( s49 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i61 (
    .a( fun3 ),
    .b( 3'b111 ),
    .\= ( s50 )
  );
  assign beq = (s0 & \op==63 );
  assign bne = (s1 & \op==63 );
  assign blt = (s2 & \op==63 );
  assign bge = (s3 & \op==63 );
  assign bltu = (s4 & \op==63 );
  assign bgeu = (s5 & \op==63 );
  assign sb = (s6 & \op==23 );
  assign sh = (s7 & \op==23 );
  assign sw = (s8 & \op==23 );
  assign lb = (s9 & \op==03 );
  assign lh = (s10 & \op==03 );
  assign lw = (s11 & \op==03 );
  assign lbu = (s12 & \op==03 );
  assign lhu = (s13 & \op==03 );
  assign addi = (s14 & \op==13 );
  assign slti = (s15 & \op==13 );
  assign sltiu = (s16 & \op==13 );
  assign xori = (s17 & \op==13 );
  assign ori = (s18 & \op==13 );
  assign andi = (s19 & \op==13 );
  assign slli = (s20 & \op==13 );
  assign srli = (s21 & s22 & \op==13 );
  assign srai = (s23 & s24 & \op==13 );
  assign add = (s25 & s26 & \op==33 );
  assign sub = (s27 & s28 & \op==33 );
  assign sll = (s29 & \op==33 );
  assign slt = (s30 & \op==33 );
  assign sltu = (s31 & \op==33 );
  assign \xor  = (s32 & \op==33 );
  assign srl = (s33 & s34 & \op==33 );
  assign sra = (s35 & s36 & \op==33 );
  assign \or  = (s37 & \op==33 );
  assign \and  = (s38 & \op==33 );
  assign fence = (s39 & \op==0F );
  assign fencei = (s40 & \op==0F );
  assign ecall = (s41 & s42 & \op==73 );
  assign ebreak = (s43 & s44 & \op==73 );
  assign csrrw = (s45 & \op==73 );
  assign csrrc = (s47 & \op==73 );
  assign csrrwi = (s48 & \op==73 );
  assign csrrci = (s50 & \op==73 );
  assign u_type = (lui | auipc);
  assign s52 = (addi | auipc | add | jal | jalr | lw | lh | lhu | lb | lbu | sw | sh | sb);
  assign s53 = (slli | sll);
  assign s54 = (srli | srl);
  assign s55 = (srai | sra);
  assign s56 = (andi | \and  | csrrc | csrrci);
  assign s57 = (ori | \or  | (s46 & \op==73 ) | (s49 & \op==73 ));
  assign s58 = (xori | \xor );
  assign s59 = (slti | slt | blt);
  assign s60 = (sltiu | bltu | sltu);
  assign s61 = (csrrw | csrrwi);
  assign add_type = (add | sub | slt | sltu | \and  | \or  | \xor  | sll | srl | sra);
  assign bxx_type = (beq | bne | blt | bltu | bge | bgeu);
  // aluopPri
  PriorityEncoder4 PriorityEncoder4_i62 (
    .in0( s52 ),
    .in1( sub ),
    .in2( s53 ),
    .in3( s54 ),
    .in4( s55 ),
    .in5( s56 ),
    .in6( s57 ),
    .in7( s58 ),
    .in8( bge ),
    .in9( s59 ),
    .in10( beq ),
    .in11( bgeu ),
    .in12( s60 ),
    .in13( bne ),
    .in14( lui ),
    .in15( s61 ),
    .num( s51 )
  );
  assign s67[0] = (add_type | bxx_type | lh | lhu | sb | sh | sw);
  assign s67[1] = ((addi | slti | sltiu | andi | ori | xori | slli | srli | srai) | bxx_type | lb | lh | sb | sw);
  assign s67[2] = (csrrw | csrrwi | jal | lhu | u_type | lh | sb | sh | lw);
  assign s67[3] = (add_type | bxx_type | csrrci | csrrw | jal | lb | lhu);
  assign s67[4] = (add_type | bxx_type | csrrw | jalr | lbu | u_type | sb | sh | sw);
  assign s67[5] = (csrrc | csrrci | csrrwi | jal | jalr | u_type);
  assign s67[6] = 1'b0;
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i63 (
    .sel( aluCon ),
    .in_0( 4'b0 ),
    .in_1( s51 ),
    .out( alu_op )
  );
  // uAR
  DIG_Register_BUS #(
    .Bits(7)
  )
  DIG_Register_BUS_i64 (
    .D( s62 ),
    .C( s63 ),
    .en( 1'b1 ),
    .Q( s64 )
  );
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i65 (
    .sel( N1 ),
    .in_0( s66 ),
    .in_1( s67 ),
    .out( s68 )
  );
  assign s69 = (s65[8] & int);
  // uRom
  uRom uRom_i66 (
    .Address( s64 ),
    .OutClock( clock ),
    .OutClockEn( en ),
    .Reset( 1'b0 ),
    .Q( s65 )
  );
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i67 (
    .sel( s69 ),
    .in_0( s68 ),
    .in_1( 7'b100000 ),
    .out( s62 )
  );
  assign s66 = s65[6:0];
  assign N1 = s65[7];
  assign aluCon = s65[9];
  assign csrW = s65[10];
  assign bxx = s65[11];
  assign Irw = s65[12];
  assign mr = s65[13];
  assign mwf = s65[15:14];
  assign mw = s65[16];
  assign rwe = s65[17];
  assign rws = s65[20:18];
  assign aluy = s65[23:21];
  assign alux = s65[26:24];
  assign pcsrc = s65[27];
  assign pcEn = s65[28];
  assign jump = s65[29];
endmodule



module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule

module ShiftLeftL #(
parameter Bits = 4,
parameter shiftBits=2
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

assign out = (in << shift);

endmodule

module \risc-v-micro-aluI  (
  input [31:0] ins, // instruction
  input [31:0] rs1,
  input [31:0] opc,
  input [2:0] axI, // aluX input
  input [2:0] ayI, // aluy input
  input [31:0] csrIn,
  input [31:0] rs2,
  input en,
  input jump,
  input clock,
  output [31:0] x,
  output [31:0] y
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire [31:0] s4;
  wire [31:0] s5;
  wire [31:0] s6;
  wire [31:0] s7;
  wire [31:0] s8;
  wire [11:0] s9;
  wire s10;
  wire [19:0] s11;
  wire s12;
  wire [19:0] s13;
  wire s14;
  wire [20:0] s15;
  wire [10:0] s16;
  wire [31:0] s17;
  wire s18;
  wire [12:0] s19;
  wire [18:0] s20;
  wire [31:0] s21;
  wire [31:0] s22;
  assign s1[4:0] = ins[19:15];
  assign s1[31:5] = 27'b0;
  assign s9[11:5] = ins[31:25];
  assign s9[4:0] = ins[11:7];
  assign s6[31:12] = ins[31:12];
  assign s6[11:0] = 12'b0;
  assign s2 = ~ rs1;
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i0 (
    .D( opc ),
    .C( clock ),
    .en( en ),
    .Q( s22 )
  );
  assign s10 = ins[31];
  assign s12 = ins[31];
  assign s14 = ins[31];
  assign s18 = ins[31];
  assign s3 = ~ s1;
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i1 (
    .sel( s10 ),
    .in_0( 20'b0 ),
    .in_1( 20'b11111111111111111111 ),
    .out( s11 )
  );
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i2 (
    .sel( s12 ),
    .in_0( 20'b0 ),
    .in_1( 20'b11111111111111111111 ),
    .out( s13 )
  );
  assign s15[0] = 1'b0;
  assign s15[10:1] = ins[30:21];
  assign s15[11] = ins[20];
  assign s15[19:12] = ins[19:12];
  assign s15[20] = s14;
  Mux_2x1_NBits #(
    .Bits(11)
  )
  Mux_2x1_NBits_i3 (
    .sel( s14 ),
    .in_0( 11'b0 ),
    .in_1( 11'b11111111111 ),
    .out( s16 )
  );
  assign s19[0] = 1'b0;
  assign s19[4:1] = ins[11:8];
  assign s19[10:5] = ins[30:25];
  assign s19[11] = ins[7];
  assign s19[12] = s18;
  Mux_2x1_NBits #(
    .Bits(19)
  )
  Mux_2x1_NBits_i4 (
    .sel( s18 ),
    .in_0( 19'b0 ),
    .in_1( 19'b1111111111111111111 ),
    .out( s20 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( jump ),
    .in_0( opc ),
    .in_1( s22 ),
    .out( s0 )
  );
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i6 (
    .sel( axI ),
    .in_0( rs1 ),
    .in_1( s0 ),
    .in_2( s1 ),
    .in_3( s2 ),
    .in_4( s3 ),
    .in_5( 32'b0 ),
    .in_6( 32'b0 ),
    .in_7( 32'b0 ),
    .out( x )
  );
  assign s4[11:0] = ins[31:20];
  assign s4[31:12] = s11;
  assign s5[11:0] = s9;
  assign s5[31:12] = s13;
  assign s17[20:0] = s15;
  assign s17[31:21] = s16;
  assign s21[12:0] = s19;
  assign s21[31:13] = s20;
  // ja
  ShiftLeftL #(
    .Bits(32),
    .shiftBits(1)
  )
  ShiftLeftL_i7 (
    .in( s17 ),
    .shift( 1'b1 ),
    .out( s7 )
  );
  // bxx
  ShiftLeftL #(
    .Bits(32),
    .shiftBits(1)
  )
  ShiftLeftL_i8 (
    .in( s21 ),
    .shift( 1'b1 ),
    .out( s8 )
  );
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i9 (
    .sel( ayI ),
    .in_0( s4 ),
    .in_1( s5 ),
    .in_2( s6 ),
    .in_3( rs2 ),
    .in_4( csrIn ),
    .in_5( 32'b100 ),
    .in_6( s7 ),
    .in_7( s8 ),
    .out( y )
  );
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule

module SignedShiftLeftL #(
parameter Bits = 4,
parameter shiftBits=2
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

reg[Bits-1:0] regOut;
reg[0:0] buma;
initial
begin
buma=1;
regOut=0;
end
always @ (*) begin
    if(shift[shiftBits-1])
        begin
        regOut=(in >>(~shift+buma));
        end
    else
        begin
        regOut = (in << shift);
        end
    end
assign out = regOut;

endmodule
module SignedShiftRightL #(
parameter Bits = 4,
parameter shiftBits=2
)
(
input [(Bits-1):0] in,
input [(shiftBits-1):0] shift,
output [(Bits - 1):0] out
);

    reg[Bits-1:0] regOut;
reg[0:0] buma;
initial
begin
buma=1;
regOut=0;
end
always @ (*) begin
    if(shift[shiftBits-1])
        begin
        regOut=(in <<(~shift+buma));
        end
    else
        begin
        regOut = (in >> shift);
        end
    end
assign out = regOut;

endmodule
module SignedShiftRightA #(
parameter Bits = 4,
parameter shiftBits=2
)
(
    input [(Bits-1):0] in,
    input [(shiftBits-1):0] shift,
    output [(Bits - 1):0] out
);

reg[Bits-1:0] regOut;
reg[0:0] buma;
initial
    begin
    buma=1;
    regOut=0;
    end
always @ (*) begin
    if(shift[shiftBits-1])
        begin
        regOut=(in <<(~shift+buma));
        end
    else
        begin
        regOut = ($signed(in)>>>shift);
        end
    end
assign out = regOut;

endmodule


module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module \risc-v-micro-alu  (
  input [3:0] alu_op,
  input [31:0] x,
  input [31:0] y,
  output [31:0] rst
);
  wire [31:0] r1;
  wire [31:0] r2;
  wire [4:0] s0;
  wire [31:0] r3;
  wire [31:0] r4;
  wire [31:0] r5;
  wire [31:0] r6;
  wire [31:0] r7;
  wire [31:0] r8;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire [31:0] r9;
  wire [31:0] r10;
  wire [31:0] r11;
  wire [31:0] r12;
  wire [31:0] r13;
  wire [31:0] r14;
  // +
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( x ),
    .b( y ),
    .c_i( 1'b0 ),
    .s( r1 )
  );
  // -
  DIG_Sub #(
    .Bits(32)
  )
  DIG_Sub_i1 (
    .a( x ),
    .b( y ),
    .c_i( 1'b0 ),
    .s( r2 )
  );
  assign r6 = (x & y);
  assign r7 = (x | y);
  assign r8 = (x ^ y);
  // s>=<
  CompSigned #(
    .Bits(32)
  )
  CompSigned_i2 (
    .a( x ),
    .b( y ),
    .\> ( s1 ),
    .\= ( s2 ),
    .\< ( s3 )
  );
  // >=<
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i3 (
    .a( x ),
    .b( y ),
    .\> ( s4 ),
    .\= ( s5 ),
    .\< ( s6 )
  );
  assign s0 = y[4:0];
  // sll
  SignedShiftLeftL #(
    .Bits(32),
    .shiftBits(5)
  )
  SignedShiftLeftL_i4 (
    .in( x ),
    .shift( s0 ),
    .out( r3 )
  );
  // srl
  SignedShiftRightL #(
    .Bits(32),
    .shiftBits(5)
  )
  SignedShiftRightL_i5 (
    .in( x ),
    .shift( s0 ),
    .out( r4 )
  );
  // sra
  SignedShiftRightA #(
    .Bits(32),
    .shiftBits(5)
  )
  SignedShiftRightA_i6 (
    .in( x ),
    .shift( s0 ),
    .out( r5 )
  );
  assign r9[0] = (s1 | s2);
  assign r9[31:1] = 31'b0;
  assign r12[0] = (s4 | s5);
  assign r12[31:1] = 31'b0;
  assign r14[0] = ~ s5;
  assign r14[31:1] = 31'b0;
  assign r10[0] = s3;
  assign r10[31:1] = 31'b0;
  assign r11[0] = s2;
  assign r11[31:1] = 31'b0;
  assign r13[0] = s6;
  assign r13[31:1] = 31'b0;
  Mux_16x1_NBits #(
    .Bits(32)
  )
  Mux_16x1_NBits_i7 (
    .sel( alu_op ),
    .in_0( r1 ),
    .in_1( r2 ),
    .in_2( r3 ),
    .in_3( r4 ),
    .in_4( r5 ),
    .in_5( r6 ),
    .in_6( r7 ),
    .in_7( r8 ),
    .in_8( r9 ),
    .in_9( r10 ),
    .in_10( r11 ),
    .in_11( r12 ),
    .in_12( r13 ),
    .in_13( r14 ),
    .in_14( y ),
    .in_15( x ),
    .out( rst )
  );
endmodule

module \risc-v-micro-regWrite  (
  input [31:0] aluR,
  input [2:0] rws,
  input [31:0] ramData,
  input [31:0] csrIn,
  output [31:0] rwData
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire s4;
  wire [23:0] s5;
  wire [7:0] s6;
  wire s7;
  wire [15:0] s8;
  wire [15:0] s9;
  assign s9 = ramData[15:0];
  assign s6 = ramData[7:0];
  assign s0[31:16] = 16'b0;
  assign s0[15:0] = s9;
  assign s1[7:0] = s6;
  assign s1[31:8] = 24'b0;
  assign s7 = s9[15];
  assign s4 = s6[7];
  Mux_2x1_NBits #(
    .Bits(24)
  )
  Mux_2x1_NBits_i0 (
    .sel( s4 ),
    .in_0( 24'b0 ),
    .in_1( 24'b111111111111111111111111 ),
    .out( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i1 (
    .sel( s7 ),
    .in_0( 16'b0 ),
    .in_1( 16'b1111111111111111 ),
    .out( s8 )
  );
  assign s3[7:0] = s6;
  assign s3[31:8] = s5;
  assign s2[15:0] = s9;
  assign s2[31:16] = s8;
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i2 (
    .sel( rws ),
    .in_0( aluR ),
    .in_1( csrIn ),
    .in_2( ramData ),
    .in_3( s0 ),
    .in_4( s1 ),
    .in_5( s2 ),
    .in_6( s3 ),
    .in_7( 32'b0 ),
    .out( rwData )
  );
endmodule

module \risc-v-micro-cpu  (
  input clock,
  input enable,
  output [7:0] ramDataIn,
  output [7:0] ramDataOut,
  output [7:0] csrDataIn,
  output csrW,
  output [7:0] csrDataOut,
  output mW,
  output mR,
  output [7:0] pcOut,
  output [9:0] clkCount,
  output irEn
);
  wire [31:0] s0;
  wire s1;
  wire [4:0] s2;
  wire s3;
  wire [4:0] s4;
  wire [4:0] s5;
  wire [31:0] s6;
  wire [31:0] s7;
  wire [7:0] s8;
  wire [31:0] s9;
  wire s10;
  wire irEn_temp;
  wire [31:0] s11;
  wire [31:0] s12;
  wire s13;
  wire [31:0] s14;
  wire [31:0] s15;
  wire [31:0] s16;
  wire [2:0] s17;
  wire [2:0] s18;
  wire [31:0] s19;
  wire s20;
  wire s21;
  wire [31:0] s22;
  wire [31:0] s23;
  wire [3:0] s24;
  wire [31:0] s25;
  wire csrW_temp;
  wire s26;
  wire mR_temp;
  wire [1:0] s27;
  wire mW_temp;
  wire [2:0] s28;
  wire s29;
  wire [31:0] s30;
  wire [31:0] s31;
  wire [7:0] s32;
  wire [7:0] s33;
  wire [31:0] s34;
  wire [31:0] s35;
  wire [31:0] s36;
  wire [31:0] s37;
  wire s38;
  wire s39;
  assign s10 = ~ clock;
  assign s3 = ~ clock;
  assign s38 = ~ clock;
  assign s39 = ~ clock;
  DIG_Counter_Nbit #(
    .Bits(10)
  )
  DIG_Counter_Nbit_i0 (
    .en( enable ),
    .C( clock ),
    .clr( 1'b0 ),
    .out( clkCount )
  );
  DIG_RegisterFile DIG_RegisterFile_i1 (
    .Din( s0 ),
    .we( s1 ),
    .Rw( s2 ),
    .C( s3 ),
    .Ra( s4 ),
    .Rb( s5 ),
    .Da( s6 ),
    .Db( s7 )
  );
  // Irom
  Irom Irom_i2 (
    .Address( s8 ),
    .OutClock( clock ),
    .OutClockEn( enable ),
    .Reset( 1'b0 ),
    .Q( s9 )
  );
  // IR
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i3 (
    .D( s9 ),
    .C( s10 ),
    .en( irEn_temp ),
    .Q( s11 )
  );
  \risc-v-micro-controller  \risc-v-micro-controller_i4 (
    .int( 1'b0 ),
    .clock( clock ),
    .ins( s11 ),
    .en( enable ),
    .alu_op( s24 ),
    .csrW( csrW_temp ),
    .bxx( s26 ),
    .Irw( irEn_temp ),
    .mr( mR_temp ),
    .mwf( s27 ),
    .mw( mW_temp ),
    .rwe( s1 ),
    .rws( s28 ),
    .aluy( s18 ),
    .alux( s17 ),
    .pcEn( s20 ),
    .pcsrc( s29 ),
    .jump( s21 )
  );
  // csr
  csr csr_i5 (
    .WrAddress( s32 ),
    .RdAddress( s32 ),
    .Data( s30 ),
    .WE( csrW_temp ),
    .RdClockEn( 1'b1 ),
    .RdClock( s39 ),
    .WrClockEn( csrW_temp ),
    .WrClock( s39 ),
    .Reset( 1'b0 ),
    .Q( s19 )
  );
  // Drom
  Drom Drom_i6 (
    .WrAddress( s33 ),
    .RdAddress( s33 ),
    .Data( s37 ),
    .WE( mW_temp ),
    .RdClockEn( mR_temp ),
    .RdClock( s38 ),
    .WrClockEn( mW_temp ),
    .WrClock( s38 ),
    .Reset( 1'b0 ),
    .Q( s31 )
  );
  // RS1
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i7 (
    .D( s6 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s15 )
  );
  // RS2
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i8 (
    .D( s7 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s16 )
  );
  assign s2 = s11[11:7];
  assign s4 = s11[19:15];
  assign s5 = s11[24:20];
  assign s32 = s11[27:20];
  assign csrDataOut = s19[7:0];
  assign ramDataOut = s31[7:0];
  assign s35[15:0] = s16[15:0];
  assign s35[31:16] = 16'b0;
  assign s36[7:0] = s16[7:0];
  assign s36[31:8] = 24'b0;
  assign s34 = s16[31:0];
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i9 (
    .sel( s27 ),
    .in_0( s34 ),
    .in_1( s35 ),
    .in_2( s36 ),
    .in_3( 32'b0 ),
    .out( s37 )
  );
  assign ramDataIn = s37[7:0];
  \risc-v-micro-aluI  \risc-v-micro-aluI_i10 (
    .ins( s11 ),
    .rs1( s15 ),
    .opc( s14 ),
    .axI( s17 ),
    .ayI( s18 ),
    .csrIn( s19 ),
    .rs2( s16 ),
    .en( s20 ),
    .jump( s21 ),
    .clock( clock ),
    .x( s22 ),
    .y( s23 )
  );
  \risc-v-micro-alu  \risc-v-micro-alu_i11 (
    .alu_op( s24 ),
    .x( s22 ),
    .y( s23 ),
    .rst( s25 )
  );
  \risc-v-micro-regWrite  \risc-v-micro-regWrite_i12 (
    .aluR( s30 ),
    .rws( s28 ),
    .ramData( s31 ),
    .csrIn( s19 ),
    .rwData( s0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i13 (
    .sel( s29 ),
    .in_0( s25 ),
    .in_1( s30 ),
    .out( s12 )
  );
  assign s13 = (s20 | (s26 & s25[0]));
  // pc
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i14 (
    .D( s12 ),
    .C( clock ),
    .en( s13 ),
    .Q( s14 )
  );
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i15 (
    .D( s25 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s30 )
  );
  assign s33 = s30[9:2];
  assign s8 = s14[9:2];
  assign csrDataIn = s30[7:0];
  assign pcOut = s14[9:2];
  assign csrW = csrW_temp;
  assign mW = mW_temp;
  assign mR = mR_temp;
  assign irEn = irEn_temp;
endmodule
