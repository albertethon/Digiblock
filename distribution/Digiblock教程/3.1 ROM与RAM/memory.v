/*
 * Generated by Digiblock. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_RegisterFile
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
    input [(Bits-1):0] Din,
    input we,
    input [(AddrBits-1):0] Rw,
    input C,
    input [(AddrBits-1):0] Ra,
    input [(AddrBits-1):0] Rb,
    output [(Bits-1):0] Da,
    output [(Bits-1):0] Db
);

    reg [(Bits-1):0] memory[0:((1 << AddrBits)-1)];

    assign Da = memory[Ra];
    assign Db = memory[Rb];

    always @ (posedge C) begin
        if (we)
            memory[Rw] <= Din;
    end
endmodule
module DIG_ROM_256X8_rom (
    input [7:0] A,
    input sel,
    output reg [7:0] D
);
    reg [7:0] my_rom [0:31];

    always @ (*) begin
        if (~sel)
            D = 8'hz;
        else if (A > 8'h1f)
            D = 8'h0;
        else
            D = my_rom[A];
    end

    initial begin
        my_rom[0] = 8'hff;
        my_rom[1] = 8'h0;
        my_rom[2] = 8'h0;
        my_rom[3] = 8'h0;
        my_rom[4] = 8'h0;
        my_rom[5] = 8'h0;
        my_rom[6] = 8'hf;
        my_rom[7] = 8'h0;
        my_rom[8] = 8'h0;
        my_rom[9] = 8'h0;
        my_rom[10] = 8'h0;
        my_rom[11] = 8'h0;
        my_rom[12] = 8'h0;
        my_rom[13] = 8'h0;
        my_rom[14] = 8'h0;
        my_rom[15] = 8'h0;
        my_rom[16] = 8'h0;
        my_rom[17] = 8'h0;
        my_rom[18] = 8'h0;
        my_rom[19] = 8'h0;
        my_rom[20] = 8'h0;
        my_rom[21] = 8'h0;
        my_rom[22] = 8'h0;
        my_rom[23] = 8'h0;
        my_rom[24] = 8'h0;
        my_rom[25] = 8'h0;
        my_rom[26] = 8'h0;
        my_rom[27] = 8'h0;
        my_rom[28] = 8'h0;
        my_rom[29] = 8'h0;
        my_rom[30] = 8'h0;
        my_rom[31] = 8'h1;
    end
endmodule
module DIG_RAMDualAccess
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
    input C, // Clock signal
    input ld,
    input [(AddrBits-1):0] \1A ,
    input [(AddrBits-1):0] \2A ,
    input [(Bits-1):0] \1Din ,
    input str,
    output [(Bits-1):0] \1D ,
    output [(Bits-1):0] \2D
);
    // CAUTION: uses distributed RAM
    reg [(Bits-1):0] memory [0:((1 << AddrBits)-1)];

    assign \1D = ld? memory[\1A ] : 'hz;
    assign \2D = memory[\2A ];

    always @ (posedge C) begin
        if (str)
            memory[\1A ] <= \1Din ;
    end

endmodule
module DIG_RAMDualPort
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
  input [(AddrBits-1):0] A,
  input [(Bits-1):0] Din,
  input str,
  input C,
  input ld,
  output [(Bits-1):0] D
);
  reg [(Bits-1):0] memory[0:((1 << AddrBits) - 1)];

  assign D = ld? memory[A] : 'hz;

  always @ (posedge C) begin
    if (str)
      memory[A] <= Din;
  end
endmodule

module memory (
  input we,
  input [1:0] Rw,
  input clock,
  input [1:0] Ra,
  input [7:0] Data,
  input [1:0] Rb,
  input [7:0] A,
  input CS,
  input [7:0] Addr, // A
  input [7:0] Din,
  input str,
  input C,
  input Id,
  input clk,
  input OE,
  input [1:0] Addr1,
  input [7:0] D,
  input W,
  input [1:0] Addr2,
  output [7:0] Da,
  output [7:0] Db,
  output [7:0] Do,
  output [7:0] Dout,
  output [7:0] D1,
  output [7:0] D2
);
  DIG_RegisterFile #(
    .Bits(8),
    .AddrBits(2)
  )
  DIG_RegisterFile_i0 (
    .Din( Data ),
    .we( we ),
    .Rw( Rw ),
    .C( clock ),
    .Ra( Ra ),
    .Rb( Rb ),
    .Da( Da ),
    .Db( Db )
  );
  // rom
  DIG_ROM_256X8_rom DIG_ROM_256X8_rom_i1 (
    .A( A ),
    .sel( CS ),
    .D( Do )
  );
  DIG_RAMDualAccess #(
    .Bits(8),
    .AddrBits(2)
  )
  DIG_RAMDualAccess_i2 (
    .str( W ),
    .C( clk ),
    .ld( OE ),
    .\1A ( Addr1 ),
    .\1Din ( D ),
    .\2A ( Addr2 ),
    .\1D ( D1 ),
    .\2D ( D2 )
  );
  DIG_RAMDualPort #(
    .Bits(8),
    .AddrBits(8)
  )
  DIG_RAMDualPort_i3 (
    .A( Addr ),
    .Din( Din ),
    .str( str ),
    .C( C ),
    .ld( Id ),
    .D( Dout )
  );
endmodule
